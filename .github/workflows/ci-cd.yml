name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

defaults:
  run:
    working-directory: ./

jobs:
  # Lint and test both frontend and backend
  test:
    name: Test
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    strategy:
      matrix:
        project: [backend, frontend]
    steps:
      - uses: actions/checkout@v4
      
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'
          cache-dependency-path: ${{ matrix.project }}/pnpm-lock.yaml
      
      - name: Install pnpm
        run: corepack enable && corepack prepare pnpm@latest --activate
      
      - name: Install dependencies
        working-directory: ${{ matrix.project }}
        run: pnpm install --frozen-lockfile
      
      - name: Lint
        working-directory: ${{ matrix.project }}
        run: pnpm lint
      
      - name: Run tests
        working-directory: ${{ matrix.project }}
        run: pnpm test
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://test:test@localhost:5432/test?schema=public
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test-secret
          CI: true

  # Build and push Docker images on push to main/develop
  build-and-push:
    name: Build and Push
    needs: test
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: sa-east-1
      
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ secrets.ECR_REPOSITORY }}/zapapro-backend
            ${{ secrets.ECR_REPOSITORY }}/zapapro-frontend
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,format=long
      
      - name: Build and push backend
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./infra/docker/Dockerfile.backend
          push: ${{ github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NODE_ENV=production
      
      - name: Build and push frontend
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./infra/docker/Dockerfile.frontend
          push: ${{ github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NODE_ENV=production

  # Deploy to ECS on push to main/develop
  deploy:
    name: Deploy
    needs: build-and-push
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    runs-on: ubuntu-latest
    environment:
      name: ${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}
      url: ${{ github.ref == 'refs/heads/main' && 'https://zapapro.com' || 'https://staging.zapapro.com' }}
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: sa-east-1
      
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      
      - name: Install Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.0
      
      - name: Terraform Init
        working-directory: ./infra/terraform
        run: |
          terraform init \
            -backend-config="bucket=zapapro-terraform-state-${{ github.ref == 'refs/heads/main' && 'prod' || 'staging' }}" \
            -backend-config="key=terraform.tfstate" \
            -backend-config="region=sa-east-1"
      
      - name: Terraform Plan
        working-directory: ./infra/terraform
        run: |
          terraform plan \
            -var="environment=${{ github.ref == 'refs/heads/main' ? 'production' : 'staging' }}" \
            -var="app_version=${{ github.sha }}" \
            -out=tfplan
      
      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
        working-directory: ./infra/terraform
        run: |
          terraform apply -auto-approve tfplan
